/* tslint:disable */
/* eslint-disable */
/**
 * Pawfect API
 * A Pawfect Web API 1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdminCreateUserRequestDto
 */
export interface AdminCreateUserRequestDto {
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof AdminCreateUserRequestDto
     */
    role?: UserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateUserRequestDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateUserRequestDto
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateUserRequestDto
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateUserRequestDto
     */
    password?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdminCreateUserRequestDto
     */
    sendEmailWithDetails?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AdminCreateUserRequestDto
     */
    iataId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateUserRequestDto
     */
    organisationName?: string | null;
}
/**
 * 
 * @export
 * @interface CountryResponseDto
 */
export interface CountryResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CountryResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CountryResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountryResponseDto
     */
    nationality?: string | null;
}
/**
 * 
 * @export
 * @interface CountryResponseDtoPagedResponse
 */
export interface CountryResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<CountryResponseDto>}
     * @memberof CountryResponseDtoPagedResponse
     */
    results?: Array<CountryResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CountryResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface DashboardResponseDto
 */
export interface DashboardResponseDto {
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    verifiedUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    pendingUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    expiredUsers?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    verifiedPets?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    pendingPets?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardResponseDto
     */
    expiredPets?: number;
}
/**
 * 
 * @export
 * @interface EmailVerificationRequestDto
 */
export interface EmailVerificationRequestDto {
    /**
     * 
     * @type {string}
     * @memberof EmailVerificationRequestDto
     */
    email?: string | null;
}
/**
 * 
 * @export
 * @interface EmailVerificationVerifyCodeDto
 */
export interface EmailVerificationVerifyCodeDto {
    /**
     * 
     * @type {string}
     * @memberof EmailVerificationVerifyCodeDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailVerificationVerifyCodeDto
     */
    code?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum ErrorCode {
    UserNotFound = 0,
    PetNotFound = 1,
    PetNotFoundForUser = 2,
    PetMedicaDatalNotFound = 3,
    EmailInUse = 4,
    InvalidEmailOrPassword = 5,
    ActionForbidden = 6,
    IataCodeNotValid = 7,
    LiabilityFormsNotFound = 8,
    NotFound = 9,
    FaqNotFound = 10,
    CantReauthenticate = 11,
    InvalidOrExpiredCode = 12,
    PasswordConfirmationNotSame = 13,
    SyncRequestAlreadyExists = 14,
    EmailNotVerified = 15,
    CodeResendTimeout = 16,
    BadRequest = 17,
    ValidationErrors = 10000,
    Required = 10001,
    NotValidEmailAddress = 10002,
    MinLength = 10003,
    MaxLength = 10004,
    Length = 10005,
    GreaterThanOrEqual = 10006,
    GreaterThan = 10007,
    LessThanOrEqual = 10008,
    LessThan = 10009,
    NotEqual = 10010,
    Predicate = 10011,
    Regex = 10012,
    Equal = 10013,
    ExactLength = 10014,
    Between = 10015,
    Empty = 10016,
    Invalid = 10017
}

/**
 * 
 * @export
 * @interface ErrorResponseDto
 */
export interface ErrorResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseDto
     */
    message?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponseDto
     */
    messageCode?: number | null;
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ErrorResponseDto
     */
    code?: HttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseDto
     */
    stacktrace?: string | null;
    /**
     * 
     * @type {Array<ValidationFieldErrorDto>}
     * @memberof ErrorResponseDto
     */
    errors?: Array<ValidationFieldErrorDto> | null;
}
/**
 * 
 * @export
 * @interface FaqRequestDto
 */
export interface FaqRequestDto {
    /**
     * 
     * @type {number}
     * @memberof FaqRequestDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FaqRequestDto
     */
    question?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FaqRequestDto
     */
    answer?: string | null;
}
/**
 * 
 * @export
 * @interface FaqResponseDto
 */
export interface FaqResponseDto {
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FaqResponseDto
     */
    question?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FaqResponseDto
     */
    answer?: string | null;
}
/**
 * 
 * @export
 * @interface FaqResponseDtoPagedResponse
 */
export interface FaqResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<FaqResponseDto>}
     * @memberof FaqResponseDtoPagedResponse
     */
    results?: Array<FaqResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface ForgotPasswordRequestDto
 */
export interface ForgotPasswordRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequestDto
     */
    email?: string | null;
}
/**
 * 
 * @export
 * @interface ForgotPasswordResetDto
 */
export interface ForgotPasswordResetDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordResetDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordResetDto
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordResetDto
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface ForgotPasswordVerifyCodeDto
 */
export interface ForgotPasswordVerifyCodeDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordVerifyCodeDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordVerifyCodeDto
     */
    code?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum GenderType {
    Male = 2,
    Female = 3
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum HttpStatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    MultipleChoices = 300,
    Ambiguous = 300,
    MovedPermanently = 301,
    Moved = 301,
    Found = 302,
    Redirect = 302,
    SeeOther = 303,
    RedirectMethod = 303,
    NotModified = 304,
    UseProxy = 305,
    Unused = 306,
    TemporaryRedirect = 307,
    RedirectKeepVerb = 307,
    PermanentRedirect = 308,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    RequestEntityTooLarge = 413,
    RequestUriTooLong = 414,
    UnsupportedMediaType = 415,
    RequestedRangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HttpVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511
}

/**
 * 
 * @export
 * @interface IATAResponseDto
 */
export interface IATAResponseDto {
    /**
     * 
     * @type {number}
     * @memberof IATAResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IATAResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IATAResponseDto
     */
    code?: string | null;
}
/**
 * 
 * @export
 * @interface IATAResponseDtoPagedResponse
 */
export interface IATAResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<IATAResponseDto>}
     * @memberof IATAResponseDtoPagedResponse
     */
    results?: Array<IATAResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof IATAResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof IATAResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof IATAResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof IATAResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface LiabilityFormResponseDto
 */
export interface LiabilityFormResponseDto {
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LiabilityFormResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiabilityFormResponseDto
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiabilityFormResponseDto
     */
    document?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDto
     */
    iataId?: number | null;
    /**
     * 
     * @type {IATAResponseDto}
     * @memberof LiabilityFormResponseDto
     */
    iata?: IATAResponseDto;
}
/**
 * 
 * @export
 * @interface LiabilityFormResponseDtoPagedResponse
 */
export interface LiabilityFormResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<LiabilityFormResponseDto>}
     * @memberof LiabilityFormResponseDtoPagedResponse
     */
    results?: Array<LiabilityFormResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityFormResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    password?: string | null;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof LoginRequestDto
     */
    role?: UserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    airlineCode?: string | null;
}
/**
 * 
 * @export
 * @interface MedicalRequestDto
 */
export interface MedicalRequestDto {
    /**
     * 
     * @type {number}
     * @memberof MedicalRequestDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesManufacturer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesNameOfProduct?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesBachNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesValidFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesValidTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAmendments?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof MedicalRequestDto
     */
    rabbiesStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodySampleCollectionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodyAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodyAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodyTelephone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodyDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    rabbiesAntibodySignature?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousManufacturer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousNameOfProduct?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousValidFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousValidTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof MedicalRequestDto
     */
    antiEchinococcousStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    otherParasiteTreatments?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    otherVaccinations?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    clinicalExamination?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    legalisation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalRequestDto
     */
    others?: string | null;
}
/**
 * 
 * @export
 * @interface MedicalResponseDto
 */
export interface MedicalResponseDto {
    /**
     * 
     * @type {number}
     * @memberof MedicalResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesManufacturer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesNameOfProduct?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesBachNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesValidFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesValidTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAmendments?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof MedicalResponseDto
     */
    rabbiesStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodySampleCollectionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodyAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodyAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodyTelephone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodyDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodySignature?: string | null;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof MedicalResponseDto
     */
    rabbiesAntibodyStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousManufacturer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousNameOfProduct?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousValidFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousValidTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousAuthorisedVeterinarian?: string | null;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof MedicalResponseDto
     */
    antiEchinococcousStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    otherParasiteTreatments?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    otherVaccinations?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    clinicalExamination?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    legalisation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalResponseDto
     */
    others?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MedicalResponseDto
     */
    petId?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum MedicalStatusEnum {
    NotVerified = 1,
    Verified = 2,
    Declined = 3,
    Expired = 4
}

/**
 * 
 * @export
 * @interface PetRequestDto
 */
export interface PetRequestDto {
    /**
     * 
     * @type {number}
     * @memberof PetRequestDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    name?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof PetRequestDto
     */
    sex?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    passportNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    species?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    dateOfBirth?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PetRequestDto
     */
    passportCountryId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    breed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    color?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    microchipNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    dateOfApplicationOfTransponder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    locationOfTransponder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    petTatto?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    dateOfApplicationOfTattoo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    locationOfTatto?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PetRequestDto
     */
    petImage?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PetRequestDto
     */
    otherComment?: string | null;
    /**
     * 
     * @type {VeterinarianRequestDto}
     * @memberof PetRequestDto
     */
    veterinarian?: VeterinarianRequestDto;
    /**
     * 
     * @type {MedicalRequestDto}
     * @memberof PetRequestDto
     */
    medical?: MedicalRequestDto;
    /**
     * 
     * @type {number}
     * @memberof PetRequestDto
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface PetResponseDto
 */
export interface PetResponseDto {
    /**
     * 
     * @type {number}
     * @memberof PetResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    externalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    petImage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    species?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    breed?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof PetResponseDto
     */
    sex?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    dateOfBirth?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    color?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    microchipNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    qrCodeImage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    dateOfApplicationOfTransponder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    locationOfTransponder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    petTatto?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    dateOfApplicationOfTattoo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    locationOfTatto?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    passportNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PetResponseDto
     */
    otherComment?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDto
     */
    passportCountryId?: number | null;
    /**
     * 
     * @type {CountryResponseDto}
     * @memberof PetResponseDto
     */
    passportCountry?: CountryResponseDto;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDto
     */
    veterinarianId?: number | null;
    /**
     * 
     * @type {VeterinarianResponseDto}
     * @memberof PetResponseDto
     */
    veterinarian?: VeterinarianResponseDto;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDto
     */
    medicalId?: number | null;
    /**
     * 
     * @type {MedicalResponseDto}
     * @memberof PetResponseDto
     */
    medical?: MedicalResponseDto;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDto
     */
    userId?: number | null;
    /**
     * 
     * @type {UserResponseDto}
     * @memberof PetResponseDto
     */
    user?: UserResponseDto;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof PetResponseDto
     */
    vaccinationAgainstRabiesStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PetResponseDto
     */
    rabbiesAntibody?: boolean;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof PetResponseDto
     */
    antiEchinococcousTreatmentStatus?: MedicalStatusEnum;
    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof PetResponseDto
     */
    finalStatus?: MedicalStatusEnum;
}
/**
 * 
 * @export
 * @interface PetResponseDtoPagedResponse
 */
export interface PetResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<PetResponseDto>}
     * @memberof PetResponseDtoPagedResponse
     */
    results?: Array<PetResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PetResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequestDto
 */
export interface RefreshTokenRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequestDto
     */
    refreshToken?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterUserRequestDto
 */
export interface RegisterUserRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequestDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequestDto
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequestDto
     */
    surname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequestDto
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface TokenResponseDto
 */
export interface TokenResponseDto {
    /**
     * 
     * @type {string}
     * @memberof TokenResponseDto
     */
    accessToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenResponseDto
     */
    accessTokenExpiration?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponseDto
     */
    refreshToken?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateMePasswordRequestDto
 */
export interface UpdateMePasswordRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMePasswordRequestDto
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMePasswordRequestDto
     */
    passwordConfirmation?: string | null;
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {number}
     * @memberof UserResponseDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    externalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    surname?: string | null;
    /**
     * 
     * @type {GenderType}
     * @memberof UserResponseDto
     */
    genderType?: GenderType;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    dateOfBirth?: string | null;
    /**
     * 
     * @type {CountryResponseDto}
     * @memberof UserResponseDto
     */
    nationality?: CountryResponseDto;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    telephone?: string | null;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof UserResponseDto
     */
    role?: UserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    profileImage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    passportNo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    documentExpiryDate?: string | null;
    /**
     * 
     * @type {UserStatusEnum}
     * @memberof UserResponseDto
     */
    status?: UserStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    otherInformation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    facebook?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    instagram?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    linkedIn?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    liabilityForm?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    emailVerifiedAt?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDto
     */
    iataId?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    isOnboarded?: boolean;
    /**
     * 
     * @type {Array<PetResponseDto>}
     * @memberof UserResponseDto
     */
    pets?: Array<PetResponseDto> | null;
}
/**
 * 
 * @export
 * @interface UserResponseDtoPagedResponse
 */
export interface UserResponseDtoPagedResponse {
    /**
     * 
     * @type {Array<UserResponseDto>}
     * @memberof UserResponseDtoPagedResponse
     */
    results?: Array<UserResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDtoPagedResponse
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDtoPagedResponse
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDtoPagedResponse
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDtoPagedResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum UserRoleEnum {
    SystemAdministrator = 1,
    Organisation = 2,
    User = 3
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum UserStatusEnum {
    NotVerified = 1,
    Verified = 2,
    Deceased = 3,
    Expired = 4
}

/**
 * 
 * @export
 * @interface ValidationFieldErrorDto
 */
export interface ValidationFieldErrorDto {
    /**
     * 
     * @type {string}
     * @memberof ValidationFieldErrorDto
     */
    field?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ValidationFieldErrorDto
     */
    error?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ValidationFieldErrorDto
     */
    extra?: any | null;
}
/**
 * 
 * @export
 * @interface VeterinarianRequestDto
 */
export interface VeterinarianRequestDto {
    /**
     * 
     * @type {number}
     * @memberof VeterinarianRequestDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    notableCharacteristics?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianRequestDto
     */
    comments?: string | null;
}
/**
 * 
 * @export
 * @interface VeterinarianResponseDto
 */
export interface VeterinarianResponseDto {
    /**
     * 
     * @type {number}
     * @memberof VeterinarianResponseDto
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    notableCharacteristics?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VeterinarianResponseDto
     */
    comments?: string | null;
}

/**
 * AdminDashboardApi - axios parameter creator
 * @export
 */
export const AdminDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminDashboardGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminDashboardApi - functional programming interface
 * @export
 */
export const AdminDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminDashboardGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminDashboardGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminDashboardApi - factory interface
 * @export
 */
export const AdminDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminDashboardApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminDashboardGet(options?: any): AxiosPromise<DashboardResponseDto> {
            return localVarFp.apiV1AdminDashboardGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminDashboardApi - object-oriented interface
 * @export
 * @class AdminDashboardApi
 * @extends {BaseAPI}
 */
export class AdminDashboardApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminDashboardApi
     */
    public apiV1AdminDashboardGet(options?: any) {
        return AdminDashboardApiFp(this.configuration).apiV1AdminDashboardGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminFaqApi - axios parameter creator
 * @export
 */
export const AdminFaqApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqDelete: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqIdGet: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/faq/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqPost: async (faqRequestDto?: FaqRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqPut: async (faqRequestDto?: FaqRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminFaqApi - functional programming interface
 * @export
 */
export const AdminFaqApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminFaqApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminFaqDelete(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminFaqDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminFaqGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminFaqGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminFaqIdGet(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminFaqIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminFaqPost(faqRequestDto?: FaqRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminFaqPost(faqRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminFaqPut(faqRequestDto?: FaqRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminFaqPut(faqRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminFaqApi - factory interface
 * @export
 */
export const AdminFaqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminFaqApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminFaqDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<FaqResponseDtoPagedResponse> {
            return localVarFp.apiV1AdminFaqGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqIdGet(id?: number, options?: any): AxiosPromise<FaqResponseDto> {
            return localVarFp.apiV1AdminFaqIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqPost(faqRequestDto?: FaqRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminFaqPost(faqRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqRequestDto} [faqRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminFaqPut(faqRequestDto?: FaqRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminFaqPut(faqRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AdminFaqDelete operation in AdminFaqApi.
 * @export
 * @interface AdminFaqApiApiV1AdminFaqDeleteRequest
 */
export interface AdminFaqApiApiV1AdminFaqDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminFaqApiApiV1AdminFaqDelete
     */
    readonly id?: number
}

/**
 * Request parameters for apiV1AdminFaqGet operation in AdminFaqApi.
 * @export
 * @interface AdminFaqApiApiV1AdminFaqGetRequest
 */
export interface AdminFaqApiApiV1AdminFaqGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof AdminFaqApiApiV1AdminFaqGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1AdminFaqIdGet operation in AdminFaqApi.
 * @export
 * @interface AdminFaqApiApiV1AdminFaqIdGetRequest
 */
export interface AdminFaqApiApiV1AdminFaqIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminFaqApiApiV1AdminFaqIdGet
     */
    readonly id?: number
}

/**
 * Request parameters for apiV1AdminFaqPost operation in AdminFaqApi.
 * @export
 * @interface AdminFaqApiApiV1AdminFaqPostRequest
 */
export interface AdminFaqApiApiV1AdminFaqPostRequest {
    /**
     * 
     * @type {FaqRequestDto}
     * @memberof AdminFaqApiApiV1AdminFaqPost
     */
    readonly faqRequestDto?: FaqRequestDto
}

/**
 * Request parameters for apiV1AdminFaqPut operation in AdminFaqApi.
 * @export
 * @interface AdminFaqApiApiV1AdminFaqPutRequest
 */
export interface AdminFaqApiApiV1AdminFaqPutRequest {
    /**
     * 
     * @type {FaqRequestDto}
     * @memberof AdminFaqApiApiV1AdminFaqPut
     */
    readonly faqRequestDto?: FaqRequestDto
}

/**
 * AdminFaqApi - object-oriented interface
 * @export
 * @class AdminFaqApi
 * @extends {BaseAPI}
 */
export class AdminFaqApi extends BaseAPI {
    /**
     * 
     * @param {AdminFaqApiApiV1AdminFaqDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminFaqApi
     */
    public apiV1AdminFaqDelete(requestParameters: AdminFaqApiApiV1AdminFaqDeleteRequest = {}, options?: any) {
        return AdminFaqApiFp(this.configuration).apiV1AdminFaqDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminFaqApiApiV1AdminFaqGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminFaqApi
     */
    public apiV1AdminFaqGet(requestParameters: AdminFaqApiApiV1AdminFaqGetRequest = {}, options?: any) {
        return AdminFaqApiFp(this.configuration).apiV1AdminFaqGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminFaqApiApiV1AdminFaqIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminFaqApi
     */
    public apiV1AdminFaqIdGet(requestParameters: AdminFaqApiApiV1AdminFaqIdGetRequest = {}, options?: any) {
        return AdminFaqApiFp(this.configuration).apiV1AdminFaqIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminFaqApiApiV1AdminFaqPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminFaqApi
     */
    public apiV1AdminFaqPost(requestParameters: AdminFaqApiApiV1AdminFaqPostRequest = {}, options?: any) {
        return AdminFaqApiFp(this.configuration).apiV1AdminFaqPost(requestParameters.faqRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminFaqApiApiV1AdminFaqPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminFaqApi
     */
    public apiV1AdminFaqPut(requestParameters: AdminFaqApiApiV1AdminFaqPutRequest = {}, options?: any) {
        return AdminFaqApiFp(this.configuration).apiV1AdminFaqPut(requestParameters.faqRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminLiabilityFormApi - axios parameter creator
 * @export
 */
export const AdminLiabilityFormApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/liabilityform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AdminLiabilityformIdDelete', 'id', id)
            const localVarPath = `/api/v1/admin/liabilityform/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AdminLiabilityformIdGet', 'id', id)
            const localVarPath = `/api/v1/admin/liabilityform/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformPost: async (id?: number, name?: string, description?: string, iATAId?: number, file?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/liabilityform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (iATAId !== undefined) { 
                localVarFormParams.append('IATAId', iATAId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformPut: async (id?: number, name?: string, description?: string, iATAId?: number, file?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/liabilityform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (iATAId !== undefined) { 
                localVarFormParams.append('IATAId', iATAId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminLiabilityFormApi - functional programming interface
 * @export
 */
export const AdminLiabilityFormApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminLiabilityFormApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminLiabilityformGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityFormResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminLiabilityformGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminLiabilityformIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminLiabilityformIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminLiabilityformIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityFormResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminLiabilityformIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminLiabilityformPost(id?: number, name?: string, description?: string, iATAId?: number, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminLiabilityformPost(id, name, description, iATAId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminLiabilityformPut(id?: number, name?: string, description?: string, iATAId?: number, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminLiabilityformPut(id, name, description, iATAId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminLiabilityFormApi - factory interface
 * @export
 */
export const AdminLiabilityFormApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminLiabilityFormApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<LiabilityFormResponseDtoPagedResponse> {
            return localVarFp.apiV1AdminLiabilityformGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminLiabilityformIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformIdGet(id: number, options?: any): AxiosPromise<LiabilityFormResponseDto> {
            return localVarFp.apiV1AdminLiabilityformIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformPost(id?: number, name?: string, description?: string, iATAId?: number, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminLiabilityformPost(id, name, description, iATAId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [iATAId] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminLiabilityformPut(id?: number, name?: string, description?: string, iATAId?: number, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminLiabilityformPut(id, name, description, iATAId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AdminLiabilityformGet operation in AdminLiabilityFormApi.
 * @export
 * @interface AdminLiabilityFormApiApiV1AdminLiabilityformGetRequest
 */
export interface AdminLiabilityFormApiApiV1AdminLiabilityformGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1AdminLiabilityformIdDelete operation in AdminLiabilityFormApi.
 * @export
 * @interface AdminLiabilityFormApiApiV1AdminLiabilityformIdDeleteRequest
 */
export interface AdminLiabilityFormApiApiV1AdminLiabilityformIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1AdminLiabilityformIdGet operation in AdminLiabilityFormApi.
 * @export
 * @interface AdminLiabilityFormApiApiV1AdminLiabilityformIdGetRequest
 */
export interface AdminLiabilityFormApiApiV1AdminLiabilityformIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1AdminLiabilityformPost operation in AdminLiabilityFormApi.
 * @export
 * @interface AdminLiabilityFormApiApiV1AdminLiabilityformPostRequest
 */
export interface AdminLiabilityFormApiApiV1AdminLiabilityformPostRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPost
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPost
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPost
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPost
     */
    readonly iATAId?: number

    /**
     * 
     * @type {any}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPost
     */
    readonly file?: any
}

/**
 * Request parameters for apiV1AdminLiabilityformPut operation in AdminLiabilityFormApi.
 * @export
 * @interface AdminLiabilityFormApiApiV1AdminLiabilityformPutRequest
 */
export interface AdminLiabilityFormApiApiV1AdminLiabilityformPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPut
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPut
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPut
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPut
     */
    readonly iATAId?: number

    /**
     * 
     * @type {any}
     * @memberof AdminLiabilityFormApiApiV1AdminLiabilityformPut
     */
    readonly file?: any
}

/**
 * AdminLiabilityFormApi - object-oriented interface
 * @export
 * @class AdminLiabilityFormApi
 * @extends {BaseAPI}
 */
export class AdminLiabilityFormApi extends BaseAPI {
    /**
     * 
     * @param {AdminLiabilityFormApiApiV1AdminLiabilityformGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLiabilityFormApi
     */
    public apiV1AdminLiabilityformGet(requestParameters: AdminLiabilityFormApiApiV1AdminLiabilityformGetRequest = {}, options?: any) {
        return AdminLiabilityFormApiFp(this.configuration).apiV1AdminLiabilityformGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLiabilityFormApiApiV1AdminLiabilityformIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLiabilityFormApi
     */
    public apiV1AdminLiabilityformIdDelete(requestParameters: AdminLiabilityFormApiApiV1AdminLiabilityformIdDeleteRequest, options?: any) {
        return AdminLiabilityFormApiFp(this.configuration).apiV1AdminLiabilityformIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLiabilityFormApiApiV1AdminLiabilityformIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLiabilityFormApi
     */
    public apiV1AdminLiabilityformIdGet(requestParameters: AdminLiabilityFormApiApiV1AdminLiabilityformIdGetRequest, options?: any) {
        return AdminLiabilityFormApiFp(this.configuration).apiV1AdminLiabilityformIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLiabilityFormApiApiV1AdminLiabilityformPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLiabilityFormApi
     */
    public apiV1AdminLiabilityformPost(requestParameters: AdminLiabilityFormApiApiV1AdminLiabilityformPostRequest = {}, options?: any) {
        return AdminLiabilityFormApiFp(this.configuration).apiV1AdminLiabilityformPost(requestParameters.id, requestParameters.name, requestParameters.description, requestParameters.iATAId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLiabilityFormApiApiV1AdminLiabilityformPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLiabilityFormApi
     */
    public apiV1AdminLiabilityformPut(requestParameters: AdminLiabilityFormApiApiV1AdminLiabilityformPutRequest = {}, options?: any) {
        return AdminLiabilityFormApiFp(this.configuration).apiV1AdminLiabilityformPut(requestParameters.id, requestParameters.name, requestParameters.description, requestParameters.iATAId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminPetsApi - axios parameter creator
 * @export
 */
export const AdminPetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AdminPetsIdDelete', 'id', id)
            const localVarPath = `/api/v1/admin/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AdminPetsIdGet', 'id', id)
            const localVarPath = `/api/v1/admin/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsPut: async (id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (sex !== undefined) { 
                localVarFormParams.append('Sex', new Blob([JSON.stringify(sex)], { type: "application/json", }));
            }
    
            if (passportNo !== undefined) { 
                localVarFormParams.append('PassportNo', passportNo as any);
            }
    
            if (species !== undefined) { 
                localVarFormParams.append('Species', species as any);
            }
    
            if (dateOfBirth !== undefined) { 
                localVarFormParams.append('DateOfBirth', dateOfBirth as any);
            }
    
            if (passportCountryId !== undefined) { 
                localVarFormParams.append('PassportCountryId', passportCountryId as any);
            }
    
            if (breed !== undefined) { 
                localVarFormParams.append('Breed', breed as any);
            }
    
            if (color !== undefined) { 
                localVarFormParams.append('Color', color as any);
            }
    
            if (microchipNo !== undefined) { 
                localVarFormParams.append('MicrochipNo', microchipNo as any);
            }
    
            if (dateOfApplicationOfTransponder !== undefined) { 
                localVarFormParams.append('DateOfApplicationOfTransponder', dateOfApplicationOfTransponder as any);
            }
    
            if (locationOfTransponder !== undefined) { 
                localVarFormParams.append('LocationOfTransponder', locationOfTransponder as any);
            }
    
            if (petTatto !== undefined) { 
                localVarFormParams.append('PetTatto', petTatto as any);
            }
    
            if (dateOfApplicationOfTattoo !== undefined) { 
                localVarFormParams.append('DateOfApplicationOfTattoo', dateOfApplicationOfTattoo as any);
            }
    
            if (locationOfTatto !== undefined) { 
                localVarFormParams.append('LocationOfTatto', locationOfTatto as any);
            }
    
            if (petImage !== undefined) { 
                localVarFormParams.append('PetImage', petImage as any);
            }
    
            if (otherComment !== undefined) { 
                localVarFormParams.append('OtherComment', otherComment as any);
            }
    
            if (veterinarianId !== undefined) { 
                localVarFormParams.append('Veterinarian.Id', veterinarianId as any);
            }
    
            if (veterinarianName !== undefined) { 
                localVarFormParams.append('Veterinarian.Name', veterinarianName as any);
            }
    
            if (veterinarianAddress !== undefined) { 
                localVarFormParams.append('Veterinarian.Address', veterinarianAddress as any);
            }
    
            if (veterinarianPhone !== undefined) { 
                localVarFormParams.append('Veterinarian.Phone', veterinarianPhone as any);
            }
    
            if (veterinarianEmail !== undefined) { 
                localVarFormParams.append('Veterinarian.Email', veterinarianEmail as any);
            }
    
            if (veterinarianNotableCharacteristics !== undefined) { 
                localVarFormParams.append('Veterinarian.NotableCharacteristics', veterinarianNotableCharacteristics as any);
            }
    
            if (veterinarianComments !== undefined) { 
                localVarFormParams.append('Veterinarian.Comments', veterinarianComments as any);
            }
    
            if (medicalId !== undefined) { 
                localVarFormParams.append('Medical.Id', medicalId as any);
            }
    
            if (medicalRabbiesManufacturer !== undefined) { 
                localVarFormParams.append('Medical.RabbiesManufacturer', medicalRabbiesManufacturer as any);
            }
    
            if (medicalRabbiesNameOfProduct !== undefined) { 
                localVarFormParams.append('Medical.RabbiesNameOfProduct', medicalRabbiesNameOfProduct as any);
            }
    
            if (medicalRabbiesBachNumber !== undefined) { 
                localVarFormParams.append('Medical.RabbiesBachNumber', medicalRabbiesBachNumber as any);
            }
    
            if (medicalRabbiesValidFrom !== undefined) { 
                localVarFormParams.append('Medical.RabbiesValidFrom', medicalRabbiesValidFrom as any);
            }
    
            if (medicalRabbiesValidTo !== undefined) { 
                localVarFormParams.append('Medical.RabbiesValidTo', medicalRabbiesValidTo as any);
            }
    
            if (medicalRabbiesAmendments !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAmendments', medicalRabbiesAmendments as any);
            }
    
            if (medicalRabbiesAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAuthorisedVeterinarian', medicalRabbiesAuthorisedVeterinarian as any);
            }
    
            if (medicalRabbiesStatus !== undefined) { 
                localVarFormParams.append('Medical.RabbiesStatus', new Blob([JSON.stringify(medicalRabbiesStatus)], { type: "application/json", }));
            }
    
            if (medicalRabbiesAntibodySampleCollectionDate !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodySampleCollectionDate', medicalRabbiesAntibodySampleCollectionDate as any);
            }
    
            if (medicalRabbiesAntibodyAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyAuthorisedVeterinarian', medicalRabbiesAntibodyAuthorisedVeterinarian as any);
            }
    
            if (medicalRabbiesAntibodyAddress !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyAddress', medicalRabbiesAntibodyAddress as any);
            }
    
            if (medicalRabbiesAntibodyTelephone !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyTelephone', medicalRabbiesAntibodyTelephone as any);
            }
    
            if (medicalRabbiesAntibodyDate !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyDate', medicalRabbiesAntibodyDate as any);
            }
    
            if (medicalRabbiesAntibodySignature !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodySignature', medicalRabbiesAntibodySignature as any);
            }
    
            if (medicalAntiEchinococcousManufacturer !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousManufacturer', medicalAntiEchinococcousManufacturer as any);
            }
    
            if (medicalAntiEchinococcousNameOfProduct !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousNameOfProduct', medicalAntiEchinococcousNameOfProduct as any);
            }
    
            if (medicalAntiEchinococcousValidFrom !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousValidFrom', medicalAntiEchinococcousValidFrom as any);
            }
    
            if (medicalAntiEchinococcousValidTo !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousValidTo', medicalAntiEchinococcousValidTo as any);
            }
    
            if (medicalAntiEchinococcousAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousAuthorisedVeterinarian', medicalAntiEchinococcousAuthorisedVeterinarian as any);
            }
    
            if (medicalAntiEchinococcousStatus !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousStatus', new Blob([JSON.stringify(medicalAntiEchinococcousStatus)], { type: "application/json", }));
            }
    
            if (medicalOtherParasiteTreatments !== undefined) { 
                localVarFormParams.append('Medical.OtherParasiteTreatments', medicalOtherParasiteTreatments as any);
            }
    
            if (medicalOtherVaccinations !== undefined) { 
                localVarFormParams.append('Medical.OtherVaccinations', medicalOtherVaccinations as any);
            }
    
            if (medicalClinicalExamination !== undefined) { 
                localVarFormParams.append('Medical.ClinicalExamination', medicalClinicalExamination as any);
            }
    
            if (medicalLegalisation !== undefined) { 
                localVarFormParams.append('Medical.Legalisation', medicalLegalisation as any);
            }
    
            if (medicalOthers !== undefined) { 
                localVarFormParams.append('Medical.Others', medicalOthers as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('UserId', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminPetsApi - functional programming interface
 * @export
 */
export const AdminPetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminPetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminPetsGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminPetsGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminPetsIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminPetsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminPetsIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminPetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminPetsPut(id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminPetsPut(id, name, sex, passportNo, species, dateOfBirth, passportCountryId, breed, color, microchipNo, dateOfApplicationOfTransponder, locationOfTransponder, petTatto, dateOfApplicationOfTattoo, locationOfTatto, petImage, otherComment, veterinarianId, veterinarianName, veterinarianAddress, veterinarianPhone, veterinarianEmail, veterinarianNotableCharacteristics, veterinarianComments, medicalId, medicalRabbiesManufacturer, medicalRabbiesNameOfProduct, medicalRabbiesBachNumber, medicalRabbiesValidFrom, medicalRabbiesValidTo, medicalRabbiesAmendments, medicalRabbiesAuthorisedVeterinarian, medicalRabbiesStatus, medicalRabbiesAntibodySampleCollectionDate, medicalRabbiesAntibodyAuthorisedVeterinarian, medicalRabbiesAntibodyAddress, medicalRabbiesAntibodyTelephone, medicalRabbiesAntibodyDate, medicalRabbiesAntibodySignature, medicalAntiEchinococcousManufacturer, medicalAntiEchinococcousNameOfProduct, medicalAntiEchinococcousValidFrom, medicalAntiEchinococcousValidTo, medicalAntiEchinococcousAuthorisedVeterinarian, medicalAntiEchinococcousStatus, medicalOtherParasiteTreatments, medicalOtherVaccinations, medicalClinicalExamination, medicalLegalisation, medicalOthers, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminPetsApi - factory interface
 * @export
 */
export const AdminPetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminPetsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<PetResponseDtoPagedResponse> {
            return localVarFp.apiV1AdminPetsGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminPetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsIdGet(id: number, options?: any): AxiosPromise<PetResponseDto> {
            return localVarFp.apiV1AdminPetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminPetsPut(id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminPetsPut(id, name, sex, passportNo, species, dateOfBirth, passportCountryId, breed, color, microchipNo, dateOfApplicationOfTransponder, locationOfTransponder, petTatto, dateOfApplicationOfTattoo, locationOfTatto, petImage, otherComment, veterinarianId, veterinarianName, veterinarianAddress, veterinarianPhone, veterinarianEmail, veterinarianNotableCharacteristics, veterinarianComments, medicalId, medicalRabbiesManufacturer, medicalRabbiesNameOfProduct, medicalRabbiesBachNumber, medicalRabbiesValidFrom, medicalRabbiesValidTo, medicalRabbiesAmendments, medicalRabbiesAuthorisedVeterinarian, medicalRabbiesStatus, medicalRabbiesAntibodySampleCollectionDate, medicalRabbiesAntibodyAuthorisedVeterinarian, medicalRabbiesAntibodyAddress, medicalRabbiesAntibodyTelephone, medicalRabbiesAntibodyDate, medicalRabbiesAntibodySignature, medicalAntiEchinococcousManufacturer, medicalAntiEchinococcousNameOfProduct, medicalAntiEchinococcousValidFrom, medicalAntiEchinococcousValidTo, medicalAntiEchinococcousAuthorisedVeterinarian, medicalAntiEchinococcousStatus, medicalOtherParasiteTreatments, medicalOtherVaccinations, medicalClinicalExamination, medicalLegalisation, medicalOthers, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AdminPetsGet operation in AdminPetsApi.
 * @export
 * @interface AdminPetsApiApiV1AdminPetsGetRequest
 */
export interface AdminPetsApiApiV1AdminPetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1AdminPetsIdDelete operation in AdminPetsApi.
 * @export
 * @interface AdminPetsApiApiV1AdminPetsIdDeleteRequest
 */
export interface AdminPetsApiApiV1AdminPetsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1AdminPetsIdGet operation in AdminPetsApi.
 * @export
 * @interface AdminPetsApiApiV1AdminPetsIdGetRequest
 */
export interface AdminPetsApiApiV1AdminPetsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1AdminPetsPut operation in AdminPetsApi.
 * @export
 * @interface AdminPetsApiApiV1AdminPetsPutRequest
 */
export interface AdminPetsApiApiV1AdminPetsPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly name?: string

    /**
     * 
     * @type {GenderType}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly sex?: GenderType

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly passportNo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly species?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly dateOfBirth?: string

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly passportCountryId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly breed?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly color?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly microchipNo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly dateOfApplicationOfTransponder?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly locationOfTransponder?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly petTatto?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly dateOfApplicationOfTattoo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly locationOfTatto?: string

    /**
     * 
     * @type {any}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly petImage?: any

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly otherComment?: string

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianName?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianAddress?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianPhone?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianEmail?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianNotableCharacteristics?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly veterinarianComments?: string

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesManufacturer?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesNameOfProduct?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesBachNumber?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesValidFrom?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesValidTo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAmendments?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAuthorisedVeterinarian?: string

    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesStatus?: MedicalStatusEnum

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodySampleCollectionDate?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodyAuthorisedVeterinarian?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodyAddress?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodyTelephone?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodyDate?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalRabbiesAntibodySignature?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousManufacturer?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousNameOfProduct?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousValidFrom?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousValidTo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousAuthorisedVeterinarian?: string

    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalAntiEchinococcousStatus?: MedicalStatusEnum

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalOtherParasiteTreatments?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalOtherVaccinations?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalClinicalExamination?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalLegalisation?: string

    /**
     * 
     * @type {string}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly medicalOthers?: string

    /**
     * 
     * @type {number}
     * @memberof AdminPetsApiApiV1AdminPetsPut
     */
    readonly userId?: number
}

/**
 * AdminPetsApi - object-oriented interface
 * @export
 * @class AdminPetsApi
 * @extends {BaseAPI}
 */
export class AdminPetsApi extends BaseAPI {
    /**
     * 
     * @param {AdminPetsApiApiV1AdminPetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPetsApi
     */
    public apiV1AdminPetsGet(requestParameters: AdminPetsApiApiV1AdminPetsGetRequest = {}, options?: any) {
        return AdminPetsApiFp(this.configuration).apiV1AdminPetsGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminPetsApiApiV1AdminPetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPetsApi
     */
    public apiV1AdminPetsIdDelete(requestParameters: AdminPetsApiApiV1AdminPetsIdDeleteRequest, options?: any) {
        return AdminPetsApiFp(this.configuration).apiV1AdminPetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminPetsApiApiV1AdminPetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPetsApi
     */
    public apiV1AdminPetsIdGet(requestParameters: AdminPetsApiApiV1AdminPetsIdGetRequest, options?: any) {
        return AdminPetsApiFp(this.configuration).apiV1AdminPetsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminPetsApiApiV1AdminPetsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminPetsApi
     */
    public apiV1AdminPetsPut(requestParameters: AdminPetsApiApiV1AdminPetsPutRequest = {}, options?: any) {
        return AdminPetsApiFp(this.configuration).apiV1AdminPetsPut(requestParameters.id, requestParameters.name, requestParameters.sex, requestParameters.passportNo, requestParameters.species, requestParameters.dateOfBirth, requestParameters.passportCountryId, requestParameters.breed, requestParameters.color, requestParameters.microchipNo, requestParameters.dateOfApplicationOfTransponder, requestParameters.locationOfTransponder, requestParameters.petTatto, requestParameters.dateOfApplicationOfTattoo, requestParameters.locationOfTatto, requestParameters.petImage, requestParameters.otherComment, requestParameters.veterinarianId, requestParameters.veterinarianName, requestParameters.veterinarianAddress, requestParameters.veterinarianPhone, requestParameters.veterinarianEmail, requestParameters.veterinarianNotableCharacteristics, requestParameters.veterinarianComments, requestParameters.medicalId, requestParameters.medicalRabbiesManufacturer, requestParameters.medicalRabbiesNameOfProduct, requestParameters.medicalRabbiesBachNumber, requestParameters.medicalRabbiesValidFrom, requestParameters.medicalRabbiesValidTo, requestParameters.medicalRabbiesAmendments, requestParameters.medicalRabbiesAuthorisedVeterinarian, requestParameters.medicalRabbiesStatus, requestParameters.medicalRabbiesAntibodySampleCollectionDate, requestParameters.medicalRabbiesAntibodyAuthorisedVeterinarian, requestParameters.medicalRabbiesAntibodyAddress, requestParameters.medicalRabbiesAntibodyTelephone, requestParameters.medicalRabbiesAntibodyDate, requestParameters.medicalRabbiesAntibodySignature, requestParameters.medicalAntiEchinococcousManufacturer, requestParameters.medicalAntiEchinococcousNameOfProduct, requestParameters.medicalAntiEchinococcousValidFrom, requestParameters.medicalAntiEchinococcousValidTo, requestParameters.medicalAntiEchinococcousAuthorisedVeterinarian, requestParameters.medicalAntiEchinococcousStatus, requestParameters.medicalOtherParasiteTreatments, requestParameters.medicalOtherVaccinations, requestParameters.medicalClinicalExamination, requestParameters.medicalLegalisation, requestParameters.medicalOthers, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminUsersApi - axios parameter creator
 * @export
 */
export const AdminUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AdminUsersIdGet', 'id', id)
            const localVarPath = `/api/v1/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdminCreateUserRequestDto} [adminCreateUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersPost: async (adminCreateUserRequestDto?: AdminCreateUserRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {UserStatusEnum} [status] 
         * @param {string} [otherInformation] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {string} [emailVerifiedAt] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersPut: async (id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, role?: UserRoleEnum, profileImage?: any, status?: UserStatusEnum, otherInformation?: string, address?: string, telephone?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, emailVerifiedAt?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (surname !== undefined) { 
                localVarFormParams.append('Surname', surname as any);
            }
    
            if (genderType !== undefined) { 
                localVarFormParams.append('GenderType', new Blob([JSON.stringify(genderType)], { type: "application/json", }));
            }
    
            if (passportNo !== undefined) { 
                localVarFormParams.append('PassportNo', passportNo as any);
            }
    
            if (documentExpiryDate !== undefined) { 
                localVarFormParams.append('DocumentExpiryDate', documentExpiryDate as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (dateOfBirth !== undefined) { 
                localVarFormParams.append('DateOfBirth', dateOfBirth as any);
            }
    
            if (nationalityId !== undefined) { 
                localVarFormParams.append('NationalityId', nationalityId as any);
            }
    
            if (role !== undefined) { 
                localVarFormParams.append('Role', new Blob([JSON.stringify(role)], { type: "application/json", }));
            }
    
            if (profileImage !== undefined) { 
                localVarFormParams.append('ProfileImage', profileImage as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('Status', new Blob([JSON.stringify(status)], { type: "application/json", }));
            }
    
            if (otherInformation !== undefined) { 
                localVarFormParams.append('OtherInformation', otherInformation as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (telephone !== undefined) { 
                localVarFormParams.append('Telephone', telephone as any);
            }
    
            if (facebook !== undefined) { 
                localVarFormParams.append('Facebook', facebook as any);
            }
    
            if (instagram !== undefined) { 
                localVarFormParams.append('Instagram', instagram as any);
            }
    
            if (linkedIn !== undefined) { 
                localVarFormParams.append('LinkedIn', linkedIn as any);
            }
    
            if (liabilityForm !== undefined) { 
                localVarFormParams.append('LiabilityForm', liabilityForm as any);
            }
    
            if (emailVerifiedAt !== undefined) { 
                localVarFormParams.append('EmailVerifiedAt', emailVerifiedAt as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('Password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUsersApi - functional programming interface
 * @export
 */
export const AdminUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUsersGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUsersGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUsersIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AdminCreateUserRequestDto} [adminCreateUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUsersPost(adminCreateUserRequestDto?: AdminCreateUserRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUsersPost(adminCreateUserRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {UserStatusEnum} [status] 
         * @param {string} [otherInformation] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {string} [emailVerifiedAt] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUsersPut(id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, role?: UserRoleEnum, profileImage?: any, status?: UserStatusEnum, otherInformation?: string, address?: string, telephone?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, emailVerifiedAt?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUsersPut(id, name, surname, genderType, passportNo, documentExpiryDate, email, dateOfBirth, nationalityId, role, profileImage, status, otherInformation, address, telephone, facebook, instagram, linkedIn, liabilityForm, emailVerifiedAt, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUsersApi - factory interface
 * @export
 */
export const AdminUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<UserResponseDtoPagedResponse> {
            return localVarFp.apiV1AdminUsersGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersIdGet(id: number, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiV1AdminUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminCreateUserRequestDto} [adminCreateUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersPost(adminCreateUserRequestDto?: AdminCreateUserRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminUsersPost(adminCreateUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {UserRoleEnum} [role] 
         * @param {any} [profileImage] 
         * @param {UserStatusEnum} [status] 
         * @param {string} [otherInformation] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {string} [emailVerifiedAt] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUsersPut(id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, role?: UserRoleEnum, profileImage?: any, status?: UserStatusEnum, otherInformation?: string, address?: string, telephone?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, emailVerifiedAt?: string, password?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminUsersPut(id, name, surname, genderType, passportNo, documentExpiryDate, email, dateOfBirth, nationalityId, role, profileImage, status, otherInformation, address, telephone, facebook, instagram, linkedIn, liabilityForm, emailVerifiedAt, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AdminUsersGet operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiApiV1AdminUsersGetRequest
 */
export interface AdminUsersApiApiV1AdminUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1AdminUsersIdGet operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiApiV1AdminUsersIdGetRequest
 */
export interface AdminUsersApiApiV1AdminUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1AdminUsersPost operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiApiV1AdminUsersPostRequest
 */
export interface AdminUsersApiApiV1AdminUsersPostRequest {
    /**
     * 
     * @type {AdminCreateUserRequestDto}
     * @memberof AdminUsersApiApiV1AdminUsersPost
     */
    readonly adminCreateUserRequestDto?: AdminCreateUserRequestDto
}

/**
 * Request parameters for apiV1AdminUsersPut operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiApiV1AdminUsersPutRequest
 */
export interface AdminUsersApiApiV1AdminUsersPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly surname?: string

    /**
     * 
     * @type {GenderType}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly genderType?: GenderType

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly passportNo?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly documentExpiryDate?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly dateOfBirth?: string

    /**
     * 
     * @type {number}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly nationalityId?: number

    /**
     * 
     * @type {UserRoleEnum}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly role?: UserRoleEnum

    /**
     * 
     * @type {any}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly profileImage?: any

    /**
     * 
     * @type {UserStatusEnum}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly status?: UserStatusEnum

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly otherInformation?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly address?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly telephone?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly facebook?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly instagram?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly linkedIn?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly liabilityForm?: boolean

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly emailVerifiedAt?: string

    /**
     * 
     * @type {string}
     * @memberof AdminUsersApiApiV1AdminUsersPut
     */
    readonly password?: string
}

/**
 * AdminUsersApi - object-oriented interface
 * @export
 * @class AdminUsersApi
 * @extends {BaseAPI}
 */
export class AdminUsersApi extends BaseAPI {
    /**
     * 
     * @param {AdminUsersApiApiV1AdminUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public apiV1AdminUsersGet(requestParameters: AdminUsersApiApiV1AdminUsersGetRequest = {}, options?: any) {
        return AdminUsersApiFp(this.configuration).apiV1AdminUsersGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminUsersApiApiV1AdminUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public apiV1AdminUsersIdGet(requestParameters: AdminUsersApiApiV1AdminUsersIdGetRequest, options?: any) {
        return AdminUsersApiFp(this.configuration).apiV1AdminUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminUsersApiApiV1AdminUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public apiV1AdminUsersPost(requestParameters: AdminUsersApiApiV1AdminUsersPostRequest = {}, options?: any) {
        return AdminUsersApiFp(this.configuration).apiV1AdminUsersPost(requestParameters.adminCreateUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminUsersApiApiV1AdminUsersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public apiV1AdminUsersPut(requestParameters: AdminUsersApiApiV1AdminUsersPutRequest = {}, options?: any) {
        return AdminUsersApiFp(this.configuration).apiV1AdminUsersPut(requestParameters.id, requestParameters.name, requestParameters.surname, requestParameters.genderType, requestParameters.passportNo, requestParameters.documentExpiryDate, requestParameters.email, requestParameters.dateOfBirth, requestParameters.nationalityId, requestParameters.role, requestParameters.profileImage, requestParameters.status, requestParameters.otherInformation, requestParameters.address, requestParameters.telephone, requestParameters.facebook, requestParameters.instagram, requestParameters.linkedIn, requestParameters.liabilityForm, requestParameters.emailVerifiedAt, requestParameters.password, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EmailVerificationRequestDto} [emailVerificationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerificationResendPost: async (emailVerificationRequestDto?: EmailVerificationRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/email-verification/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerificationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailVerificationVerifyCodeDto} [emailVerificationVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerificationVerifyPost: async (emailVerificationVerifyCodeDto?: EmailVerificationVerifyCodeDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/email-verification/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerificationVerifyCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordRequestPost: async (forgotPasswordRequestDto?: ForgotPasswordRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/forgot-password/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordResetPasswordPost: async (forgotPasswordResetDto?: ForgotPasswordResetDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/forgot-password/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordResetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordVerifyCodePost: async (forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/forgot-password/verify-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordVerifyCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost: async (loginRequestDto?: LoginRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRefreshTokenPost: async (refreshTokenRequestDto?: RefreshTokenRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserRequestDto} [registerUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterPost: async (registerUserRequestDto?: RegisterUserRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EmailVerificationRequestDto} [emailVerificationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthEmailVerificationResendPost(emailVerificationRequestDto?: EmailVerificationRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthEmailVerificationResendPost(emailVerificationRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmailVerificationVerifyCodeDto} [emailVerificationVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthEmailVerificationVerifyPost(emailVerificationVerifyCodeDto?: EmailVerificationVerifyCodeDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthEmailVerificationVerifyPost(emailVerificationVerifyCodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthForgotPasswordRequestPost(forgotPasswordRequestDto?: ForgotPasswordRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthForgotPasswordRequestPost(forgotPasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthForgotPasswordResetPasswordPost(forgotPasswordResetDto?: ForgotPasswordResetDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthForgotPasswordResetPasswordPost(forgotPasswordResetDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLoginPost(loginRequestDto?: LoginRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRefreshTokenPost(refreshTokenRequestDto?: RefreshTokenRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshTokenPost(refreshTokenRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterUserRequestDto} [registerUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRegisterPost(registerUserRequestDto?: RegisterUserRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRegisterPost(registerUserRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {EmailVerificationRequestDto} [emailVerificationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerificationResendPost(emailVerificationRequestDto?: EmailVerificationRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthEmailVerificationResendPost(emailVerificationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailVerificationVerifyCodeDto} [emailVerificationVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerificationVerifyPost(emailVerificationVerifyCodeDto?: EmailVerificationVerifyCodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthEmailVerificationVerifyPost(emailVerificationVerifyCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} [forgotPasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordRequestPost(forgotPasswordRequestDto?: ForgotPasswordRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthForgotPasswordRequestPost(forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordResetDto} [forgotPasswordResetDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordResetPasswordPost(forgotPasswordResetDto?: ForgotPasswordResetDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthForgotPasswordResetPasswordPost(forgotPasswordResetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordVerifyCodeDto} [forgotPasswordVerifyCodeDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthForgotPasswordVerifyCodePost(forgotPasswordVerifyCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost(loginRequestDto?: LoginRequestDto, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.apiV1AuthLoginPost(loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenRequestDto} [refreshTokenRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRefreshTokenPost(refreshTokenRequestDto?: RefreshTokenRequestDto, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.apiV1AuthRefreshTokenPost(refreshTokenRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserRequestDto} [registerUserRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterPost(registerUserRequestDto?: RegisterUserRequestDto, options?: any): AxiosPromise<TokenResponseDto> {
            return localVarFp.apiV1AuthRegisterPost(registerUserRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AuthEmailVerificationResendPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthEmailVerificationResendPostRequest
 */
export interface AuthApiApiV1AuthEmailVerificationResendPostRequest {
    /**
     * 
     * @type {EmailVerificationRequestDto}
     * @memberof AuthApiApiV1AuthEmailVerificationResendPost
     */
    readonly emailVerificationRequestDto?: EmailVerificationRequestDto
}

/**
 * Request parameters for apiV1AuthEmailVerificationVerifyPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthEmailVerificationVerifyPostRequest
 */
export interface AuthApiApiV1AuthEmailVerificationVerifyPostRequest {
    /**
     * 
     * @type {EmailVerificationVerifyCodeDto}
     * @memberof AuthApiApiV1AuthEmailVerificationVerifyPost
     */
    readonly emailVerificationVerifyCodeDto?: EmailVerificationVerifyCodeDto
}

/**
 * Request parameters for apiV1AuthForgotPasswordRequestPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthForgotPasswordRequestPostRequest
 */
export interface AuthApiApiV1AuthForgotPasswordRequestPostRequest {
    /**
     * 
     * @type {ForgotPasswordRequestDto}
     * @memberof AuthApiApiV1AuthForgotPasswordRequestPost
     */
    readonly forgotPasswordRequestDto?: ForgotPasswordRequestDto
}

/**
 * Request parameters for apiV1AuthForgotPasswordResetPasswordPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthForgotPasswordResetPasswordPostRequest
 */
export interface AuthApiApiV1AuthForgotPasswordResetPasswordPostRequest {
    /**
     * 
     * @type {ForgotPasswordResetDto}
     * @memberof AuthApiApiV1AuthForgotPasswordResetPasswordPost
     */
    readonly forgotPasswordResetDto?: ForgotPasswordResetDto
}

/**
 * Request parameters for apiV1AuthForgotPasswordVerifyCodePost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthForgotPasswordVerifyCodePostRequest
 */
export interface AuthApiApiV1AuthForgotPasswordVerifyCodePostRequest {
    /**
     * 
     * @type {ForgotPasswordVerifyCodeDto}
     * @memberof AuthApiApiV1AuthForgotPasswordVerifyCodePost
     */
    readonly forgotPasswordVerifyCodeDto?: ForgotPasswordVerifyCodeDto
}

/**
 * Request parameters for apiV1AuthLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthLoginPostRequest
 */
export interface AuthApiApiV1AuthLoginPostRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof AuthApiApiV1AuthLoginPost
     */
    readonly loginRequestDto?: LoginRequestDto
}

/**
 * Request parameters for apiV1AuthRefreshTokenPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthRefreshTokenPostRequest
 */
export interface AuthApiApiV1AuthRefreshTokenPostRequest {
    /**
     * 
     * @type {RefreshTokenRequestDto}
     * @memberof AuthApiApiV1AuthRefreshTokenPost
     */
    readonly refreshTokenRequestDto?: RefreshTokenRequestDto
}

/**
 * Request parameters for apiV1AuthRegisterPost operation in AuthApi.
 * @export
 * @interface AuthApiApiV1AuthRegisterPostRequest
 */
export interface AuthApiApiV1AuthRegisterPostRequest {
    /**
     * 
     * @type {RegisterUserRequestDto}
     * @memberof AuthApiApiV1AuthRegisterPost
     */
    readonly registerUserRequestDto?: RegisterUserRequestDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiApiV1AuthEmailVerificationResendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthEmailVerificationResendPost(requestParameters: AuthApiApiV1AuthEmailVerificationResendPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthEmailVerificationResendPost(requestParameters.emailVerificationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthEmailVerificationVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthEmailVerificationVerifyPost(requestParameters: AuthApiApiV1AuthEmailVerificationVerifyPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthEmailVerificationVerifyPost(requestParameters.emailVerificationVerifyCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthForgotPasswordRequestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthForgotPasswordRequestPost(requestParameters: AuthApiApiV1AuthForgotPasswordRequestPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthForgotPasswordRequestPost(requestParameters.forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthForgotPasswordResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthForgotPasswordResetPasswordPost(requestParameters: AuthApiApiV1AuthForgotPasswordResetPasswordPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthForgotPasswordResetPasswordPost(requestParameters.forgotPasswordResetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthForgotPasswordVerifyCodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthForgotPasswordVerifyCodePost(requestParameters: AuthApiApiV1AuthForgotPasswordVerifyCodePostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthForgotPasswordVerifyCodePost(requestParameters.forgotPasswordVerifyCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthLoginPost(requestParameters: AuthApiApiV1AuthLoginPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthLoginPost(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthLogoutPost(options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthRefreshTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthRefreshTokenPost(requestParameters: AuthApiApiV1AuthRefreshTokenPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthRefreshTokenPost(requestParameters.refreshTokenRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiV1AuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthRegisterPost(requestParameters: AuthApiApiV1AuthRegisterPostRequest = {}, options?: any) {
        return AuthApiFp(this.configuration).apiV1AuthRegisterPost(requestParameters.registerUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CountriesGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CountriesGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<CountryResponseDtoPagedResponse> {
            return localVarFp.apiV1CountriesGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1CountriesGet operation in CountriesApi.
 * @export
 * @interface CountriesApiApiV1CountriesGetRequest
 */
export interface CountriesApiApiV1CountriesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof CountriesApiApiV1CountriesGet
     */
    readonly filter?: string
}

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @param {CountriesApiApiV1CountriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesGet(requestParameters: CountriesApiApiV1CountriesGetRequest = {}, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IataApi - axios parameter creator
 * @export
 */
export const IataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IataGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/iata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IataApi - functional programming interface
 * @export
 */
export const IataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IataGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IATAResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IataGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IataApi - factory interface
 * @export
 */
export const IataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IataGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<IATAResponseDtoPagedResponse> {
            return localVarFp.apiV1IataGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1IataGet operation in IataApi.
 * @export
 * @interface IataApiApiV1IataGetRequest
 */
export interface IataApiApiV1IataGetRequest {
    /**
     * 
     * @type {string}
     * @memberof IataApiApiV1IataGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof IataApiApiV1IataGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof IataApiApiV1IataGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof IataApiApiV1IataGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof IataApiApiV1IataGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof IataApiApiV1IataGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof IataApiApiV1IataGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof IataApiApiV1IataGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof IataApiApiV1IataGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof IataApiApiV1IataGet
     */
    readonly filter?: string
}

/**
 * IataApi - object-oriented interface
 * @export
 * @class IataApi
 * @extends {BaseAPI}
 */
export class IataApi extends BaseAPI {
    /**
     * 
     * @param {IataApiApiV1IataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IataApi
     */
    public apiV1IataGet(requestParameters: IataApiApiV1IataGetRequest = {}, options?: any) {
        return IataApiFp(this.configuration).apiV1IataGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganisationPetsApi - axios parameter creator
 * @export
 */
export const OrganisationPetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationPetsIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1OrganisationPetsIdGet', 'id', id)
            const localVarPath = `/api/v1/organisation/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganisationPetsApi - functional programming interface
 * @export
 */
export const OrganisationPetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganisationPetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganisationPetsIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganisationPetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganisationPetsApi - factory interface
 * @export
 */
export const OrganisationPetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganisationPetsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationPetsIdGet(id: number, options?: any): AxiosPromise<PetResponseDto> {
            return localVarFp.apiV1OrganisationPetsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1OrganisationPetsIdGet operation in OrganisationPetsApi.
 * @export
 * @interface OrganisationPetsApiApiV1OrganisationPetsIdGetRequest
 */
export interface OrganisationPetsApiApiV1OrganisationPetsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof OrganisationPetsApiApiV1OrganisationPetsIdGet
     */
    readonly id: number
}

/**
 * OrganisationPetsApi - object-oriented interface
 * @export
 * @class OrganisationPetsApi
 * @extends {BaseAPI}
 */
export class OrganisationPetsApi extends BaseAPI {
    /**
     * 
     * @param {OrganisationPetsApiApiV1OrganisationPetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationPetsApi
     */
    public apiV1OrganisationPetsIdGet(requestParameters: OrganisationPetsApiApiV1OrganisationPetsIdGetRequest, options?: any) {
        return OrganisationPetsApiFp(this.configuration).apiV1OrganisationPetsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganisationSearchApi - axios parameter creator
 * @export
 */
export const OrganisationSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userExternalId] 
         * @param {string} [microchipNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationSearchGet: async (userExternalId?: string, microchipNo?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organisation/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userExternalId !== undefined) {
                localVarQueryParameter['UserExternalId'] = userExternalId;
            }

            if (microchipNo !== undefined) {
                localVarQueryParameter['MicrochipNo'] = microchipNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganisationSearchApi - functional programming interface
 * @export
 */
export const OrganisationSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganisationSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userExternalId] 
         * @param {string} [microchipNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganisationSearchGet(userExternalId?: string, microchipNo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PetResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganisationSearchGet(userExternalId, microchipNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganisationSearchApi - factory interface
 * @export
 */
export const OrganisationSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganisationSearchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userExternalId] 
         * @param {string} [microchipNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationSearchGet(userExternalId?: string, microchipNo?: string, options?: any): AxiosPromise<Array<PetResponseDto>> {
            return localVarFp.apiV1OrganisationSearchGet(userExternalId, microchipNo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1OrganisationSearchGet operation in OrganisationSearchApi.
 * @export
 * @interface OrganisationSearchApiApiV1OrganisationSearchGetRequest
 */
export interface OrganisationSearchApiApiV1OrganisationSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganisationSearchApiApiV1OrganisationSearchGet
     */
    readonly userExternalId?: string

    /**
     * 
     * @type {string}
     * @memberof OrganisationSearchApiApiV1OrganisationSearchGet
     */
    readonly microchipNo?: string
}

/**
 * OrganisationSearchApi - object-oriented interface
 * @export
 * @class OrganisationSearchApi
 * @extends {BaseAPI}
 */
export class OrganisationSearchApi extends BaseAPI {
    /**
     * 
     * @param {OrganisationSearchApiApiV1OrganisationSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationSearchApi
     */
    public apiV1OrganisationSearchGet(requestParameters: OrganisationSearchApiApiV1OrganisationSearchGetRequest = {}, options?: any) {
        return OrganisationSearchApiFp(this.configuration).apiV1OrganisationSearchGet(requestParameters.userExternalId, requestParameters.microchipNo, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganisationUsersApi - axios parameter creator
 * @export
 */
export const OrganisationUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationUsersIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1OrganisationUsersIdGet', 'id', id)
            const localVarPath = `/api/v1/organisation/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganisationUsersApi - functional programming interface
 * @export
 */
export const OrganisationUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganisationUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganisationUsersIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganisationUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganisationUsersApi - factory interface
 * @export
 */
export const OrganisationUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganisationUsersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganisationUsersIdGet(id: number, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiV1OrganisationUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1OrganisationUsersIdGet operation in OrganisationUsersApi.
 * @export
 * @interface OrganisationUsersApiApiV1OrganisationUsersIdGetRequest
 */
export interface OrganisationUsersApiApiV1OrganisationUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof OrganisationUsersApiApiV1OrganisationUsersIdGet
     */
    readonly id: number
}

/**
 * OrganisationUsersApi - object-oriented interface
 * @export
 * @class OrganisationUsersApi
 * @extends {BaseAPI}
 */
export class OrganisationUsersApi extends BaseAPI {
    /**
     * 
     * @param {OrganisationUsersApiApiV1OrganisationUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationUsersApi
     */
    public apiV1OrganisationUsersIdGet(requestParameters: OrganisationUsersApiApiV1OrganisationUsersIdGetRequest, options?: any) {
        return OrganisationUsersApiFp(this.configuration).apiV1OrganisationUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeChangePasswordPut: async (updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMePasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeDeactivatePost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me/deactivate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {any} [profileImage] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [otherInformation] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMePut: async (id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, profileImage?: any, address?: string, telephone?: string, otherInformation?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (surname !== undefined) { 
                localVarFormParams.append('Surname', surname as any);
            }
    
            if (genderType !== undefined) { 
                localVarFormParams.append('GenderType', new Blob([JSON.stringify(genderType)], { type: "application/json", }));
            }
    
            if (passportNo !== undefined) { 
                localVarFormParams.append('PassportNo', passportNo as any);
            }
    
            if (documentExpiryDate !== undefined) { 
                localVarFormParams.append('DocumentExpiryDate', documentExpiryDate as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('Email', email as any);
            }
    
            if (dateOfBirth !== undefined) { 
                localVarFormParams.append('DateOfBirth', dateOfBirth as any);
            }
    
            if (nationalityId !== undefined) { 
                localVarFormParams.append('NationalityId', nationalityId as any);
            }
    
            if (profileImage !== undefined) { 
                localVarFormParams.append('ProfileImage', profileImage as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (telephone !== undefined) { 
                localVarFormParams.append('Telephone', telephone as any);
            }
    
            if (otherInformation !== undefined) { 
                localVarFormParams.append('OtherInformation', otherInformation as any);
            }
    
            if (facebook !== undefined) { 
                localVarFormParams.append('Facebook', facebook as any);
            }
    
            if (instagram !== undefined) { 
                localVarFormParams.append('Instagram', instagram as any);
            }
    
            if (linkedIn !== undefined) { 
                localVarFormParams.append('LinkedIn', linkedIn as any);
            }
    
            if (liabilityForm !== undefined) { 
                localVarFormParams.append('LiabilityForm', liabilityForm as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMeChangePasswordPut(updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersMeChangePasswordPut(updateMePasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMeDeactivatePost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersMeDeactivatePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {any} [profileImage] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [otherInformation] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMePut(id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, profileImage?: any, address?: string, telephone?: string, otherInformation?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersMePut(id, name, surname, genderType, passportNo, documentExpiryDate, email, dateOfBirth, nationalityId, profileImage, address, telephone, otherInformation, facebook, instagram, linkedIn, liabilityForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateMePasswordRequestDto} [updateMePasswordRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeChangePasswordPut(updateMePasswordRequestDto?: UpdateMePasswordRequestDto, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiV1UsersMeChangePasswordPut(updateMePasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeDeactivatePost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UsersMeDeactivatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeGet(options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiV1UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {GenderType} [genderType] 
         * @param {string} [passportNo] 
         * @param {string} [documentExpiryDate] 
         * @param {string} [email] 
         * @param {string} [dateOfBirth] 
         * @param {number} [nationalityId] 
         * @param {any} [profileImage] 
         * @param {string} [address] 
         * @param {string} [telephone] 
         * @param {string} [otherInformation] 
         * @param {string} [facebook] 
         * @param {string} [instagram] 
         * @param {string} [linkedIn] 
         * @param {boolean} [liabilityForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMePut(id?: number, name?: string, surname?: string, genderType?: GenderType, passportNo?: string, documentExpiryDate?: string, email?: string, dateOfBirth?: string, nationalityId?: number, profileImage?: any, address?: string, telephone?: string, otherInformation?: string, facebook?: string, instagram?: string, linkedIn?: string, liabilityForm?: boolean, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.apiV1UsersMePut(id, name, surname, genderType, passportNo, documentExpiryDate, email, dateOfBirth, nationalityId, profileImage, address, telephone, otherInformation, facebook, instagram, linkedIn, liabilityForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UsersMeChangePasswordPut operation in UsersApi.
 * @export
 * @interface UsersApiApiV1UsersMeChangePasswordPutRequest
 */
export interface UsersApiApiV1UsersMeChangePasswordPutRequest {
    /**
     * 
     * @type {UpdateMePasswordRequestDto}
     * @memberof UsersApiApiV1UsersMeChangePasswordPut
     */
    readonly updateMePasswordRequestDto?: UpdateMePasswordRequestDto
}

/**
 * Request parameters for apiV1UsersMePut operation in UsersApi.
 * @export
 * @interface UsersApiApiV1UsersMePutRequest
 */
export interface UsersApiApiV1UsersMePutRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly surname?: string

    /**
     * 
     * @type {GenderType}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly genderType?: GenderType

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly passportNo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly documentExpiryDate?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly dateOfBirth?: string

    /**
     * 
     * @type {number}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly nationalityId?: number

    /**
     * 
     * @type {any}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly profileImage?: any

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly address?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly telephone?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly otherInformation?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly facebook?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly instagram?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly linkedIn?: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiApiV1UsersMePut
     */
    readonly liabilityForm?: boolean
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiApiV1UsersMeChangePasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UsersMeChangePasswordPut(requestParameters: UsersApiApiV1UsersMeChangePasswordPutRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiV1UsersMeChangePasswordPut(requestParameters.updateMePasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UsersMeDeactivatePost(options?: any) {
        return UsersApiFp(this.configuration).apiV1UsersMeDeactivatePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UsersMeGet(options?: any) {
        return UsersApiFp(this.configuration).apiV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiV1UsersMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UsersMePut(requestParameters: UsersApiApiV1UsersMePutRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).apiV1UsersMePut(requestParameters.id, requestParameters.name, requestParameters.surname, requestParameters.genderType, requestParameters.passportNo, requestParameters.documentExpiryDate, requestParameters.email, requestParameters.dateOfBirth, requestParameters.nationalityId, requestParameters.profileImage, requestParameters.address, requestParameters.telephone, requestParameters.otherInformation, requestParameters.facebook, requestParameters.instagram, requestParameters.linkedIn, requestParameters.liabilityForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersFaqApi - axios parameter creator
 * @export
 */
export const UsersFaqApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserFaqGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersFaqApi - functional programming interface
 * @export
 */
export const UsersFaqApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersFaqApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserFaqGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserFaqGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersFaqApi - factory interface
 * @export
 */
export const UsersFaqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersFaqApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserFaqGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<FaqResponseDtoPagedResponse> {
            return localVarFp.apiV1UserFaqGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UserFaqGet operation in UsersFaqApi.
 * @export
 * @interface UsersFaqApiApiV1UserFaqGetRequest
 */
export interface UsersFaqApiApiV1UserFaqGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof UsersFaqApiApiV1UserFaqGet
     */
    readonly filter?: string
}

/**
 * UsersFaqApi - object-oriented interface
 * @export
 * @class UsersFaqApi
 * @extends {BaseAPI}
 */
export class UsersFaqApi extends BaseAPI {
    /**
     * 
     * @param {UsersFaqApiApiV1UserFaqGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersFaqApi
     */
    public apiV1UserFaqGet(requestParameters: UsersFaqApiApiV1UserFaqGetRequest = {}, options?: any) {
        return UsersFaqApiFp(this.configuration).apiV1UserFaqGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersLiabilityFormApi - axios parameter creator
 * @export
 */
export const UsersLiabilityFormApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLiabilityformGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/liabilityform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLiabilityformIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1UserLiabilityformIdGet', 'id', id)
            const localVarPath = `/api/v1/user/liabilityform/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersLiabilityFormApi - functional programming interface
 * @export
 */
export const UsersLiabilityFormApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersLiabilityFormApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserLiabilityformGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiabilityFormResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserLiabilityformGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserLiabilityformIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityFormResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserLiabilityformIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersLiabilityFormApi - factory interface
 * @export
 */
export const UsersLiabilityFormApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersLiabilityFormApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLiabilityformGet(options?: any): AxiosPromise<Array<LiabilityFormResponseDto>> {
            return localVarFp.apiV1UserLiabilityformGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLiabilityformIdGet(id: number, options?: any): AxiosPromise<LiabilityFormResponseDto> {
            return localVarFp.apiV1UserLiabilityformIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UserLiabilityformIdGet operation in UsersLiabilityFormApi.
 * @export
 * @interface UsersLiabilityFormApiApiV1UserLiabilityformIdGetRequest
 */
export interface UsersLiabilityFormApiApiV1UserLiabilityformIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersLiabilityFormApiApiV1UserLiabilityformIdGet
     */
    readonly id: number
}

/**
 * UsersLiabilityFormApi - object-oriented interface
 * @export
 * @class UsersLiabilityFormApi
 * @extends {BaseAPI}
 */
export class UsersLiabilityFormApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersLiabilityFormApi
     */
    public apiV1UserLiabilityformGet(options?: any) {
        return UsersLiabilityFormApiFp(this.configuration).apiV1UserLiabilityformGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersLiabilityFormApiApiV1UserLiabilityformIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersLiabilityFormApi
     */
    public apiV1UserLiabilityformIdGet(requestParameters: UsersLiabilityFormApiApiV1UserLiabilityformIdGetRequest, options?: any) {
        return UsersLiabilityFormApiFp(this.configuration).apiV1UserLiabilityformIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersPetsApi - axios parameter creator
 * @export
 */
export const UsersPetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsGet: async (includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['Includes'] = includes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['FromId'] = fromId;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['UpdatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (orderByKey !== undefined) {
                localVarQueryParameter['OrderByKey'] = orderByKey;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['IsDescending'] = isDescending;
            }

            if (isFullSize !== undefined) {
                localVarQueryParameter['IsFullSize'] = isFullSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1UserPetsIdDelete', 'id', id)
            const localVarPath = `/api/v1/user/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPetIdGet: async (petId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('apiV1UserPetsPetIdGet', 'petId', petId)
            const localVarPath = `/api/v1/user/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PetRequestDto} [petRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPost: async (petRequestDto?: PetRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPut: async (id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (sex !== undefined) { 
                localVarFormParams.append('Sex', new Blob([JSON.stringify(sex)], { type: "application/json", }));
            }
    
            if (passportNo !== undefined) { 
                localVarFormParams.append('PassportNo', passportNo as any);
            }
    
            if (species !== undefined) { 
                localVarFormParams.append('Species', species as any);
            }
    
            if (dateOfBirth !== undefined) { 
                localVarFormParams.append('DateOfBirth', dateOfBirth as any);
            }
    
            if (passportCountryId !== undefined) { 
                localVarFormParams.append('PassportCountryId', passportCountryId as any);
            }
    
            if (breed !== undefined) { 
                localVarFormParams.append('Breed', breed as any);
            }
    
            if (color !== undefined) { 
                localVarFormParams.append('Color', color as any);
            }
    
            if (microchipNo !== undefined) { 
                localVarFormParams.append('MicrochipNo', microchipNo as any);
            }
    
            if (dateOfApplicationOfTransponder !== undefined) { 
                localVarFormParams.append('DateOfApplicationOfTransponder', dateOfApplicationOfTransponder as any);
            }
    
            if (locationOfTransponder !== undefined) { 
                localVarFormParams.append('LocationOfTransponder', locationOfTransponder as any);
            }
    
            if (petTatto !== undefined) { 
                localVarFormParams.append('PetTatto', petTatto as any);
            }
    
            if (dateOfApplicationOfTattoo !== undefined) { 
                localVarFormParams.append('DateOfApplicationOfTattoo', dateOfApplicationOfTattoo as any);
            }
    
            if (locationOfTatto !== undefined) { 
                localVarFormParams.append('LocationOfTatto', locationOfTatto as any);
            }
    
            if (petImage !== undefined) { 
                localVarFormParams.append('PetImage', petImage as any);
            }
    
            if (otherComment !== undefined) { 
                localVarFormParams.append('OtherComment', otherComment as any);
            }
    
            if (veterinarianId !== undefined) { 
                localVarFormParams.append('Veterinarian.Id', veterinarianId as any);
            }
    
            if (veterinarianName !== undefined) { 
                localVarFormParams.append('Veterinarian.Name', veterinarianName as any);
            }
    
            if (veterinarianAddress !== undefined) { 
                localVarFormParams.append('Veterinarian.Address', veterinarianAddress as any);
            }
    
            if (veterinarianPhone !== undefined) { 
                localVarFormParams.append('Veterinarian.Phone', veterinarianPhone as any);
            }
    
            if (veterinarianEmail !== undefined) { 
                localVarFormParams.append('Veterinarian.Email', veterinarianEmail as any);
            }
    
            if (veterinarianNotableCharacteristics !== undefined) { 
                localVarFormParams.append('Veterinarian.NotableCharacteristics', veterinarianNotableCharacteristics as any);
            }
    
            if (veterinarianComments !== undefined) { 
                localVarFormParams.append('Veterinarian.Comments', veterinarianComments as any);
            }
    
            if (medicalId !== undefined) { 
                localVarFormParams.append('Medical.Id', medicalId as any);
            }
    
            if (medicalRabbiesManufacturer !== undefined) { 
                localVarFormParams.append('Medical.RabbiesManufacturer', medicalRabbiesManufacturer as any);
            }
    
            if (medicalRabbiesNameOfProduct !== undefined) { 
                localVarFormParams.append('Medical.RabbiesNameOfProduct', medicalRabbiesNameOfProduct as any);
            }
    
            if (medicalRabbiesBachNumber !== undefined) { 
                localVarFormParams.append('Medical.RabbiesBachNumber', medicalRabbiesBachNumber as any);
            }
    
            if (medicalRabbiesValidFrom !== undefined) { 
                localVarFormParams.append('Medical.RabbiesValidFrom', medicalRabbiesValidFrom as any);
            }
    
            if (medicalRabbiesValidTo !== undefined) { 
                localVarFormParams.append('Medical.RabbiesValidTo', medicalRabbiesValidTo as any);
            }
    
            if (medicalRabbiesAmendments !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAmendments', medicalRabbiesAmendments as any);
            }
    
            if (medicalRabbiesAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAuthorisedVeterinarian', medicalRabbiesAuthorisedVeterinarian as any);
            }
    
            if (medicalRabbiesStatus !== undefined) { 
                localVarFormParams.append('Medical.RabbiesStatus', new Blob([JSON.stringify(medicalRabbiesStatus)], { type: "application/json", }));
            }
    
            if (medicalRabbiesAntibodySampleCollectionDate !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodySampleCollectionDate', medicalRabbiesAntibodySampleCollectionDate as any);
            }
    
            if (medicalRabbiesAntibodyAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyAuthorisedVeterinarian', medicalRabbiesAntibodyAuthorisedVeterinarian as any);
            }
    
            if (medicalRabbiesAntibodyAddress !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyAddress', medicalRabbiesAntibodyAddress as any);
            }
    
            if (medicalRabbiesAntibodyTelephone !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyTelephone', medicalRabbiesAntibodyTelephone as any);
            }
    
            if (medicalRabbiesAntibodyDate !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodyDate', medicalRabbiesAntibodyDate as any);
            }
    
            if (medicalRabbiesAntibodySignature !== undefined) { 
                localVarFormParams.append('Medical.RabbiesAntibodySignature', medicalRabbiesAntibodySignature as any);
            }
    
            if (medicalAntiEchinococcousManufacturer !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousManufacturer', medicalAntiEchinococcousManufacturer as any);
            }
    
            if (medicalAntiEchinococcousNameOfProduct !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousNameOfProduct', medicalAntiEchinococcousNameOfProduct as any);
            }
    
            if (medicalAntiEchinococcousValidFrom !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousValidFrom', medicalAntiEchinococcousValidFrom as any);
            }
    
            if (medicalAntiEchinococcousValidTo !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousValidTo', medicalAntiEchinococcousValidTo as any);
            }
    
            if (medicalAntiEchinococcousAuthorisedVeterinarian !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousAuthorisedVeterinarian', medicalAntiEchinococcousAuthorisedVeterinarian as any);
            }
    
            if (medicalAntiEchinococcousStatus !== undefined) { 
                localVarFormParams.append('Medical.AntiEchinococcousStatus', new Blob([JSON.stringify(medicalAntiEchinococcousStatus)], { type: "application/json", }));
            }
    
            if (medicalOtherParasiteTreatments !== undefined) { 
                localVarFormParams.append('Medical.OtherParasiteTreatments', medicalOtherParasiteTreatments as any);
            }
    
            if (medicalOtherVaccinations !== undefined) { 
                localVarFormParams.append('Medical.OtherVaccinations', medicalOtherVaccinations as any);
            }
    
            if (medicalClinicalExamination !== undefined) { 
                localVarFormParams.append('Medical.ClinicalExamination', medicalClinicalExamination as any);
            }
    
            if (medicalLegalisation !== undefined) { 
                localVarFormParams.append('Medical.Legalisation', medicalLegalisation as any);
            }
    
            if (medicalOthers !== undefined) { 
                localVarFormParams.append('Medical.Others', medicalOthers as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('UserId', userId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPetsApi - functional programming interface
 * @export
 */
export const UsersPetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPetsGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDtoPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPetsGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPetsIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPetsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPetsPetIdGet(petId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPetsPetIdGet(petId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PetRequestDto} [petRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPetsPost(petRequestDto?: PetRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPetsPost(petRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPetsPut(id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPetsPut(id, name, sex, passportNo, species, dateOfBirth, passportCountryId, breed, color, microchipNo, dateOfApplicationOfTransponder, locationOfTransponder, petTatto, dateOfApplicationOfTattoo, locationOfTatto, petImage, otherComment, veterinarianId, veterinarianName, veterinarianAddress, veterinarianPhone, veterinarianEmail, veterinarianNotableCharacteristics, veterinarianComments, medicalId, medicalRabbiesManufacturer, medicalRabbiesNameOfProduct, medicalRabbiesBachNumber, medicalRabbiesValidFrom, medicalRabbiesValidTo, medicalRabbiesAmendments, medicalRabbiesAuthorisedVeterinarian, medicalRabbiesStatus, medicalRabbiesAntibodySampleCollectionDate, medicalRabbiesAntibodyAuthorisedVeterinarian, medicalRabbiesAntibodyAddress, medicalRabbiesAntibodyTelephone, medicalRabbiesAntibodyDate, medicalRabbiesAntibodySignature, medicalAntiEchinococcousManufacturer, medicalAntiEchinococcousNameOfProduct, medicalAntiEchinococcousValidFrom, medicalAntiEchinococcousValidTo, medicalAntiEchinococcousAuthorisedVeterinarian, medicalAntiEchinococcousStatus, medicalOtherParasiteTreatments, medicalOtherVaccinations, medicalClinicalExamination, medicalLegalisation, medicalOthers, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPetsApi - factory interface
 * @export
 */
export const UsersPetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPetsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [includes] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {number} [fromId] 
         * @param {string} [updatedAfter] 
         * @param {string} [orderByKey] 
         * @param {boolean} [isDescending] 
         * @param {boolean} [isFullSize] 
         * @param {string} [query] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsGet(includes?: string, pageSize?: number, page?: number, fromId?: number, updatedAfter?: string, orderByKey?: string, isDescending?: boolean, isFullSize?: boolean, query?: string, filter?: string, options?: any): AxiosPromise<PetResponseDtoPagedResponse> {
            return localVarFp.apiV1UserPetsGet(includes, pageSize, page, fromId, updatedAfter, orderByKey, isDescending, isFullSize, query, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserPetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} petId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPetIdGet(petId: number, options?: any): AxiosPromise<PetResponseDto> {
            return localVarFp.apiV1UserPetsPetIdGet(petId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PetRequestDto} [petRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPost(petRequestDto?: PetRequestDto, options?: any): AxiosPromise<PetResponseDto> {
            return localVarFp.apiV1UserPetsPost(petRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {GenderType} [sex] 
         * @param {string} [passportNo] 
         * @param {string} [species] 
         * @param {string} [dateOfBirth] 
         * @param {number} [passportCountryId] 
         * @param {string} [breed] 
         * @param {string} [color] 
         * @param {string} [microchipNo] 
         * @param {string} [dateOfApplicationOfTransponder] 
         * @param {string} [locationOfTransponder] 
         * @param {string} [petTatto] 
         * @param {string} [dateOfApplicationOfTattoo] 
         * @param {string} [locationOfTatto] 
         * @param {any} [petImage] 
         * @param {string} [otherComment] 
         * @param {number} [veterinarianId] 
         * @param {string} [veterinarianName] 
         * @param {string} [veterinarianAddress] 
         * @param {string} [veterinarianPhone] 
         * @param {string} [veterinarianEmail] 
         * @param {string} [veterinarianNotableCharacteristics] 
         * @param {string} [veterinarianComments] 
         * @param {number} [medicalId] 
         * @param {string} [medicalRabbiesManufacturer] 
         * @param {string} [medicalRabbiesNameOfProduct] 
         * @param {string} [medicalRabbiesBachNumber] 
         * @param {string} [medicalRabbiesValidFrom] 
         * @param {string} [medicalRabbiesValidTo] 
         * @param {string} [medicalRabbiesAmendments] 
         * @param {string} [medicalRabbiesAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalRabbiesStatus] 
         * @param {string} [medicalRabbiesAntibodySampleCollectionDate] 
         * @param {string} [medicalRabbiesAntibodyAuthorisedVeterinarian] 
         * @param {string} [medicalRabbiesAntibodyAddress] 
         * @param {string} [medicalRabbiesAntibodyTelephone] 
         * @param {string} [medicalRabbiesAntibodyDate] 
         * @param {string} [medicalRabbiesAntibodySignature] 
         * @param {string} [medicalAntiEchinococcousManufacturer] 
         * @param {string} [medicalAntiEchinococcousNameOfProduct] 
         * @param {string} [medicalAntiEchinococcousValidFrom] 
         * @param {string} [medicalAntiEchinococcousValidTo] 
         * @param {string} [medicalAntiEchinococcousAuthorisedVeterinarian] 
         * @param {MedicalStatusEnum} [medicalAntiEchinococcousStatus] 
         * @param {string} [medicalOtherParasiteTreatments] 
         * @param {string} [medicalOtherVaccinations] 
         * @param {string} [medicalClinicalExamination] 
         * @param {string} [medicalLegalisation] 
         * @param {string} [medicalOthers] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPetsPut(id?: number, name?: string, sex?: GenderType, passportNo?: string, species?: string, dateOfBirth?: string, passportCountryId?: number, breed?: string, color?: string, microchipNo?: string, dateOfApplicationOfTransponder?: string, locationOfTransponder?: string, petTatto?: string, dateOfApplicationOfTattoo?: string, locationOfTatto?: string, petImage?: any, otherComment?: string, veterinarianId?: number, veterinarianName?: string, veterinarianAddress?: string, veterinarianPhone?: string, veterinarianEmail?: string, veterinarianNotableCharacteristics?: string, veterinarianComments?: string, medicalId?: number, medicalRabbiesManufacturer?: string, medicalRabbiesNameOfProduct?: string, medicalRabbiesBachNumber?: string, medicalRabbiesValidFrom?: string, medicalRabbiesValidTo?: string, medicalRabbiesAmendments?: string, medicalRabbiesAuthorisedVeterinarian?: string, medicalRabbiesStatus?: MedicalStatusEnum, medicalRabbiesAntibodySampleCollectionDate?: string, medicalRabbiesAntibodyAuthorisedVeterinarian?: string, medicalRabbiesAntibodyAddress?: string, medicalRabbiesAntibodyTelephone?: string, medicalRabbiesAntibodyDate?: string, medicalRabbiesAntibodySignature?: string, medicalAntiEchinococcousManufacturer?: string, medicalAntiEchinococcousNameOfProduct?: string, medicalAntiEchinococcousValidFrom?: string, medicalAntiEchinococcousValidTo?: string, medicalAntiEchinococcousAuthorisedVeterinarian?: string, medicalAntiEchinococcousStatus?: MedicalStatusEnum, medicalOtherParasiteTreatments?: string, medicalOtherVaccinations?: string, medicalClinicalExamination?: string, medicalLegalisation?: string, medicalOthers?: string, userId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserPetsPut(id, name, sex, passportNo, species, dateOfBirth, passportCountryId, breed, color, microchipNo, dateOfApplicationOfTransponder, locationOfTransponder, petTatto, dateOfApplicationOfTattoo, locationOfTatto, petImage, otherComment, veterinarianId, veterinarianName, veterinarianAddress, veterinarianPhone, veterinarianEmail, veterinarianNotableCharacteristics, veterinarianComments, medicalId, medicalRabbiesManufacturer, medicalRabbiesNameOfProduct, medicalRabbiesBachNumber, medicalRabbiesValidFrom, medicalRabbiesValidTo, medicalRabbiesAmendments, medicalRabbiesAuthorisedVeterinarian, medicalRabbiesStatus, medicalRabbiesAntibodySampleCollectionDate, medicalRabbiesAntibodyAuthorisedVeterinarian, medicalRabbiesAntibodyAddress, medicalRabbiesAntibodyTelephone, medicalRabbiesAntibodyDate, medicalRabbiesAntibodySignature, medicalAntiEchinococcousManufacturer, medicalAntiEchinococcousNameOfProduct, medicalAntiEchinococcousValidFrom, medicalAntiEchinococcousValidTo, medicalAntiEchinococcousAuthorisedVeterinarian, medicalAntiEchinococcousStatus, medicalOtherParasiteTreatments, medicalOtherVaccinations, medicalClinicalExamination, medicalLegalisation, medicalOthers, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UserPetsGet operation in UsersPetsApi.
 * @export
 * @interface UsersPetsApiApiV1UserPetsGetRequest
 */
export interface UsersPetsApiApiV1UserPetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly includes?: string

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly fromId?: number

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly updatedAfter?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly orderByKey?: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly isFullSize?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly query?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1UserPetsIdDelete operation in UsersPetsApi.
 * @export
 * @interface UsersPetsApiApiV1UserPetsIdDeleteRequest
 */
export interface UsersPetsApiApiV1UserPetsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1UserPetsPetIdGet operation in UsersPetsApi.
 * @export
 * @interface UsersPetsApiApiV1UserPetsPetIdGetRequest
 */
export interface UsersPetsApiApiV1UserPetsPetIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPetIdGet
     */
    readonly petId: number
}

/**
 * Request parameters for apiV1UserPetsPost operation in UsersPetsApi.
 * @export
 * @interface UsersPetsApiApiV1UserPetsPostRequest
 */
export interface UsersPetsApiApiV1UserPetsPostRequest {
    /**
     * 
     * @type {PetRequestDto}
     * @memberof UsersPetsApiApiV1UserPetsPost
     */
    readonly petRequestDto?: PetRequestDto
}

/**
 * Request parameters for apiV1UserPetsPut operation in UsersPetsApi.
 * @export
 * @interface UsersPetsApiApiV1UserPetsPutRequest
 */
export interface UsersPetsApiApiV1UserPetsPutRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly name?: string

    /**
     * 
     * @type {GenderType}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly sex?: GenderType

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly passportNo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly species?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly dateOfBirth?: string

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly passportCountryId?: number

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly breed?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly color?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly microchipNo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly dateOfApplicationOfTransponder?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly locationOfTransponder?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly petTatto?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly dateOfApplicationOfTattoo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly locationOfTatto?: string

    /**
     * 
     * @type {any}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly petImage?: any

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly otherComment?: string

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianId?: number

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianName?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianAddress?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianPhone?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianEmail?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianNotableCharacteristics?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly veterinarianComments?: string

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalId?: number

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesManufacturer?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesNameOfProduct?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesBachNumber?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesValidFrom?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesValidTo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAmendments?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAuthorisedVeterinarian?: string

    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesStatus?: MedicalStatusEnum

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodySampleCollectionDate?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodyAuthorisedVeterinarian?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodyAddress?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodyTelephone?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodyDate?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalRabbiesAntibodySignature?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousManufacturer?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousNameOfProduct?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousValidFrom?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousValidTo?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousAuthorisedVeterinarian?: string

    /**
     * 
     * @type {MedicalStatusEnum}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalAntiEchinococcousStatus?: MedicalStatusEnum

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalOtherParasiteTreatments?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalOtherVaccinations?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalClinicalExamination?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalLegalisation?: string

    /**
     * 
     * @type {string}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly medicalOthers?: string

    /**
     * 
     * @type {number}
     * @memberof UsersPetsApiApiV1UserPetsPut
     */
    readonly userId?: number
}

/**
 * UsersPetsApi - object-oriented interface
 * @export
 * @class UsersPetsApi
 * @extends {BaseAPI}
 */
export class UsersPetsApi extends BaseAPI {
    /**
     * 
     * @param {UsersPetsApiApiV1UserPetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPetsApi
     */
    public apiV1UserPetsGet(requestParameters: UsersPetsApiApiV1UserPetsGetRequest = {}, options?: any) {
        return UsersPetsApiFp(this.configuration).apiV1UserPetsGet(requestParameters.includes, requestParameters.pageSize, requestParameters.page, requestParameters.fromId, requestParameters.updatedAfter, requestParameters.orderByKey, requestParameters.isDescending, requestParameters.isFullSize, requestParameters.query, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersPetsApiApiV1UserPetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPetsApi
     */
    public apiV1UserPetsIdDelete(requestParameters: UsersPetsApiApiV1UserPetsIdDeleteRequest, options?: any) {
        return UsersPetsApiFp(this.configuration).apiV1UserPetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersPetsApiApiV1UserPetsPetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPetsApi
     */
    public apiV1UserPetsPetIdGet(requestParameters: UsersPetsApiApiV1UserPetsPetIdGetRequest, options?: any) {
        return UsersPetsApiFp(this.configuration).apiV1UserPetsPetIdGet(requestParameters.petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersPetsApiApiV1UserPetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPetsApi
     */
    public apiV1UserPetsPost(requestParameters: UsersPetsApiApiV1UserPetsPostRequest = {}, options?: any) {
        return UsersPetsApiFp(this.configuration).apiV1UserPetsPost(requestParameters.petRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersPetsApiApiV1UserPetsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPetsApi
     */
    public apiV1UserPetsPut(requestParameters: UsersPetsApiApiV1UserPetsPutRequest = {}, options?: any) {
        return UsersPetsApiFp(this.configuration).apiV1UserPetsPut(requestParameters.id, requestParameters.name, requestParameters.sex, requestParameters.passportNo, requestParameters.species, requestParameters.dateOfBirth, requestParameters.passportCountryId, requestParameters.breed, requestParameters.color, requestParameters.microchipNo, requestParameters.dateOfApplicationOfTransponder, requestParameters.locationOfTransponder, requestParameters.petTatto, requestParameters.dateOfApplicationOfTattoo, requestParameters.locationOfTatto, requestParameters.petImage, requestParameters.otherComment, requestParameters.veterinarianId, requestParameters.veterinarianName, requestParameters.veterinarianAddress, requestParameters.veterinarianPhone, requestParameters.veterinarianEmail, requestParameters.veterinarianNotableCharacteristics, requestParameters.veterinarianComments, requestParameters.medicalId, requestParameters.medicalRabbiesManufacturer, requestParameters.medicalRabbiesNameOfProduct, requestParameters.medicalRabbiesBachNumber, requestParameters.medicalRabbiesValidFrom, requestParameters.medicalRabbiesValidTo, requestParameters.medicalRabbiesAmendments, requestParameters.medicalRabbiesAuthorisedVeterinarian, requestParameters.medicalRabbiesStatus, requestParameters.medicalRabbiesAntibodySampleCollectionDate, requestParameters.medicalRabbiesAntibodyAuthorisedVeterinarian, requestParameters.medicalRabbiesAntibodyAddress, requestParameters.medicalRabbiesAntibodyTelephone, requestParameters.medicalRabbiesAntibodyDate, requestParameters.medicalRabbiesAntibodySignature, requestParameters.medicalAntiEchinococcousManufacturer, requestParameters.medicalAntiEchinococcousNameOfProduct, requestParameters.medicalAntiEchinococcousValidFrom, requestParameters.medicalAntiEchinococcousValidTo, requestParameters.medicalAntiEchinococcousAuthorisedVeterinarian, requestParameters.medicalAntiEchinococcousStatus, requestParameters.medicalOtherParasiteTreatments, requestParameters.medicalOtherVaccinations, requestParameters.medicalClinicalExamination, requestParameters.medicalLegalisation, requestParameters.medicalOthers, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}


